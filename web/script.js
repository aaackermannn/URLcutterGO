const API_BASE = 'http://localhost:8080/api/v1';

const shortenForm = document.getElementById('shortenForm');
const lookupForm = document.getElementById('lookupForm');
const resultDiv = document.getElementById('result');
const lookupResultDiv = document.getElementById('lookupResult');
const redirectResultDiv = document.getElementById('redirectResult');
const apiStatus = document.getElementById('apiStatus');
const dbStatus = document.getElementById('dbStatus');

document.addEventListener('DOMContentLoaded', function() {
    checkHealth();
});

function showResult(element, message, type = 'success') {
    element.innerHTML = message;
    element.className = `result ${type}`;
}

function showError(element, message) {
    showResult(element, message, 'error');
}

function showInfo(element, message) {
    showResult(element, message, 'info');
}

shortenForm.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const urlInput = document.getElementById('urlInput');
    const url = urlInput.value.trim();
    
    if (!url) {
        showError(resultDiv, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL');
        return;
    }
    
    try {
        showInfo(resultDiv, '–°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É...');
        
        const response = await fetch(`${API_BASE}/shorten`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ url: url })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        const shortUrl = `http://localhost:8080/${data.short_url}`;
        const resultHTML = `
            <div class="success-url">
                <div>
                    <strong>‚úÖ –ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</strong><br>
                    <a href="${shortUrl}" target="_blank" class="short-url-link">${shortUrl}</a>
                </div>
                <button class="copy-btn" onclick="copyToClipboard('${shortUrl}')">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
            </div>
            <div class="url-display">
                <strong>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL:</strong><br>
                <a href="${url}" target="_blank">${url}</a>
            </div>
            <div class="test-redirect">
                <button onclick="testRedirect('${data.short_url}')" class="test-btn">üîó –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç</button>
            </div>
        `;
        
        showResult(resultDiv, resultHTML);
        urlInput.value = '';
        
    } catch (error) {
        console.error('Error:', error);
        showError(resultDiv, `–û—à–∏–±–∫–∞: ${error.message}`);
    }
});

lookupForm.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const shortCodeInput = document.getElementById('shortCodeInput');
    const shortCode = shortCodeInput.value.trim();
    
    if (!shortCode) {
        showError(lookupResultDiv, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥');
        return;
    }
    
    try {
        showInfo(lookupResultDiv, '–ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–µ...');
        
        const response = await fetch(`${API_BASE}/url/${shortCode}`);
        
        if (!response.ok) {
            if (response.status === 404) {
                throw new Error('–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        const shortUrl = `http://localhost:8080/${data.short_url}`;
        const resultHTML = `
            <div class="url-display">
                <strong>–ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞:</strong><br>
                <a href="${shortUrl}" target="_blank" class="short-url-link">${shortUrl}</a>
            </div>
            <div class="url-display">
                <strong>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL:</strong><br>
                <a href="${data.original_url}" target="_blank">${data.original_url}</a>
            </div>
            <div class="url-info">
                <strong>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</strong><br>
                ‚Ä¢ –ö–ª–∏–∫–æ–≤: ${data.clicks || 0}<br>
                ‚Ä¢ –°–æ–∑–¥–∞–Ω–∞: ${new Date(data.created_at).toLocaleString('ru-RU')}
            </div>
            <div class="action-buttons">
                <button class="copy-btn" onclick="copyToClipboard('${shortUrl}')">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É</button>
                <button class="test-btn" onclick="testRedirect('${data.short_url}')">üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç</button>
            </div>
        `;
        
        showResult(lookupResultDiv, resultHTML);
        shortCodeInput.value = '';
        
    } catch (error) {
        console.error('Error:', error);
        showError(lookupResultDiv, `–û—à–∏–±–∫–∞: ${error.message}`);
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
async function testRedirect(shortCode) {
    try {
        showInfo(redirectResultDiv, '–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç...');
        
        const response = await fetch(`http://localhost:8080/${shortCode}`, {
            method: 'GET',
            redirect: 'manual'
        });
        
        if (response.status >= 300 && response.status < 400) {
            const redirectUrl = response.headers.get('Location');
            showResult(redirectResultDiv, `
                <strong>‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!</strong><br>
                <strong>–ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞:</strong> http://localhost:8080/${shortCode}<br>
                <strong>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞:</strong> <a href="${redirectUrl}" target="_blank">${redirectUrl}</a><br>
                <strong>–°—Ç–∞—Ç—É—Å:</strong> ${response.status}
            `);
        } else {
            showError(redirectResultDiv, `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status}`);
        }
        
    } catch (error) {
        console.error('Error:', error);
        showError(redirectResultDiv, `–û—à–∏–±–∫–∞: ${error.message}`);
    }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞
async function testRedirectFromInput() {
    const redirectInput = document.getElementById('redirectInput');
    const shortCode = redirectInput.value.trim();
    
    if (!shortCode) {
        showError(redirectResultDiv, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥');
        return;
    }
    
    await testRedirect(shortCode);
}

async function checkHealth() {
    apiStatus.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
    apiStatus.className = 'status checking';
    dbStatus.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
    dbStatus.className = 'status checking';
    
    try {
        const response = await fetch('http://localhost:8080/health');
        if (response.ok) {
            apiStatus.textContent = '–û–Ω–ª–∞–π–Ω';
            apiStatus.className = 'status online';
            dbStatus.textContent = '–û–Ω–ª–∞–π–Ω';
            dbStatus.className = 'status online';
        } else {
            throw new Error(`Status: ${response.status}`);
        }
    } catch (error) {
        console.error('Health check failed:', error);
        apiStatus.textContent = '–û—Ñ—Ñ–ª–∞–π–Ω';
        apiStatus.className = 'status offline';
        dbStatus.textContent = '–û—Ñ—Ñ–ª–∞–π–Ω';
        dbStatus.className = 'status offline';
    }
}

async function copyToClipboard(text) {
    try {
        await navigator.clipboard.writeText(text);
        alert('‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    } catch (err) {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        alert('‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    }
}

setInterval(checkHealth, 30000);